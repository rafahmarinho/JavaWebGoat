trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - group: 'Veracode Api Key'
  - name: veracodeAppProfile
    value: '$(Build.DefinitionName)'
  - name: srcPack
    value: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)'
  - name: analisysPack
    value: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)/analisysPack.zip'

steps:
- task: CmdLine@2
  inputs:
    script: 'npm install'
  displayName: 'NPM'

# Detecta se é Java (se existir pom.xml ou build.gradle)
- bash: |
    if [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
      echo "##vso[task.setvariable variable=IS_JAVA]true"
    else
      echo "##vso[task.setvariable variable=IS_JAVA]false"
    fi
  displayName: 'Detectar Projeto Java'

# Se for Java, compila e empacota .jar/.war. Senão, empacota com a Veracode CLI normalmente.
- bash: |
    mkdir -p $(srcPack)
    if [ "$(IS_JAVA)" = "true" ]; then
      # Detecta versão do Java
      JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml 2>/dev/null || echo "17")
      if [[ "$JAVA_VERSION" != "11" && "$JAVA_VERSION" != "17" && "$JAVA_VERSION" != "21" ]]; then
        JAVA_VERSION="17"
      fi
      echo "Usando JAVA_VERSION=$JAVA_VERSION"
      # Instala Java necessário (somente se build for Maven)
      sudo update-alternatives --set java /usr/lib/jvm/java-${JAVA_VERSION}-openjdk-amd64/bin/java || true
      sudo update-alternatives --set javac /usr/lib/jvm/java-${JAVA_VERSION}-openjdk-amd64/bin/javac || true
      # Compila Maven ou Gradle
      if [ -f "pom.xml" ]; then
        mvn clean package -DskipTests
      elif [ -f "build.gradle" ]; then
        ./gradlew build -x test
      fi
      ARTIFACT=$(find target/ build/libs/ -maxdepth 1 -type f \( -name "*.jar" -o -name "*.war" \) | head -n 1)
      if [ -n "$ARTIFACT" ]; then
        cp "$ARTIFACT" "$(analisysPack)"
        echo "Empacotado $ARTIFACT em $(analisysPack)"
      else
        echo "Nenhum .jar ou .war encontrado! Tentando empacotar com Veracode CLI."
        curl -fsS https://tools.veracode.com/veracode-cli/install | sh
        ./veracode package --source . --output $(srcPack) --trust
        ZIPFILE=$(find $(srcPack) -type f -name "*.zip" | head -n 1)
        if [ -n "$ZIPFILE" ]; then
          cp "$ZIPFILE" "$(analisysPack)"
          echo "Pacote $ZIPFILE copiado para $(analisysPack)"
        else
          echo "Nenhum arquivo ZIP encontrado. Falha no empacotamento!"
          exit 1
        fi
      fi
    else
      # Não é Java: usa a Veracode CLI normalmente
      curl -fsS https://tools.veracode.com/veracode-cli/install | sh
      ./veracode package --source . --output $(srcPack) --trust
      ZIPFILE=$(find $(srcPack) -type f -name "*.zip" | head -n 1)
      if [ -n "$ZIPFILE" ]; then
        cp "$ZIPFILE" "$(analisysPack)"
        echo "Pacote $ZIPFILE copiado para $(analisysPack)"
      else
        echo "Nenhum arquivo ZIP encontrado. Falha no empacotamento!"
        exit 1
      fi
    fi
  displayName: 'Build e Empacotamento Inteligente (Java/Outros)'

- task: CmdLine@2
  inputs:
    script: |
      export SRCCLR_API_TOKEN=$(SRCCLR_API_TOKEN)
      curl -sSL https://download.sourceclear.com/ci.sh | bash -s -- scan --update-advisor --allow-dirty
  displayName: 'Veracode SCA'
  continueOnError: true

- script: |
    curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
  displayName: 'Download Pipeline Scanner'

- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: 'pipeline-scan-LATEST.zip'
    destinationFolder: '$(Build.ArtifactStagingDirectory)'
    cleanDestinationFolder: false

- script: |
    java -jar $(Build.ArtifactStagingDirectory)/pipeline-scan.jar -vid $(APIID) -vkey $(APIKEY) --file '$(analisysPack)' --issue_details true 
  displayName: 'Veracode PipelineScan'
  continueOnError: true

- task: Veracode@3
  inputs:
    ConnectionDetailsSelection: 'Credentials'
    apiId: '$(APIID)'
    apiKey: '$(APIKEY)'
    veracodeAppProfile: '$(veracodeAppProfile)'
    version: '$(build.buildNumber)'
    filepath: '$(analisysPack)'
    createSandBox: false
    createProfile: true
    importResults: false
    failBuildOnPolicyFail: false
  displayName: 'Veracode SAST'

# - task: Veracode Flaw Importer@3
#   inputs:
#     ConnectionDetailsSelection: 'Credentials'
#     apiId: '$(APIID)'
#     apiKey: '$(APIKEY)'
#     veracodeAppProfile: '$(veracodeAppProfile)'
#     sandboxName: 
#     importType: 'All Flaws'
#     workItemType: 'Issue'
#     area: '$(system.teamProject)'
#     addCustomTag: '$(build.buildNumber)'
#     flawImportLimit: '1000'
#   displayName: 'Veracode importando falhas'
