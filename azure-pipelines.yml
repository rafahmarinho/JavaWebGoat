trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - group: 'Veracode Api Key'
  - name: veracodeAppProfile
    value: '$(Build.DefinitionName)'
  - name: srcPack
    value: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)'
  - name: analisysPack
    value: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)/analisysPack.zip'

steps:
# Detecta se é projeto Java (pom.xml ou build.gradle)
- bash: |
    if [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
      echo "##vso[task.setvariable variable=IS_JAVA]true"
    else
      echo "##vso[task.setvariable variable=IS_JAVA]false"
    fi
  displayName: 'Detectar Projeto Java'

# Compilação/empacotamento universal
- bash: |
    mkdir -p $(srcPack)

    if [ "$(IS_JAVA)" = "true" ]; then
      # Detecta Java (padrão 17 se não encontrar)
      JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml 2>/dev/null || echo "17")
      if [[ "$JAVA_VERSION" != "11" && "$JAVA_VERSION" != "17" && "$JAVA_VERSION" != "21" ]]; then
        JAVA_VERSION="17"
      fi

      # Instala JDK se for Maven (com suporte a Maven 11, 17, 21)
      echo "Instalando Java $JAVA_VERSION..."
      sudo apt-get update -qq
      sudo apt-get install -y openjdk-${JAVA_VERSION}-jdk

      export JAVA_HOME=/usr/lib/jvm/java-${JAVA_VERSION}-openjdk-amd64
      export PATH=$JAVA_HOME/bin:$PATH
      echo "JAVA_HOME: $JAVA_HOME"
      java -version

      # Compila Maven/Gradle
      if [ -f "pom.xml" ]; then
        mvn clean package -DskipTests
      elif [ -f "build.gradle" ]; then
        ./gradlew build -x test
      fi

      ARTIFACT=$(find target/ build/libs/ -maxdepth 1 -type f \( -name "*.jar" -o -name "*.war" \) | head -n 1)
      if [ -n "$ARTIFACT" ]; then
        cp "$ARTIFACT" "$(analisysPack)"
        echo "Empacotado $ARTIFACT para $(analisysPack)"
      else
        echo "Nenhum .jar/.war encontrado. Falha no build."
        exit 1
      fi
    else
      # Para outras stacks: empacota com Veracode CLI
      curl -fsS https://tools.veracode.com/veracode-cli/install | sh
      ./veracode package --source . --output $(srcPack) --trust
      ZIPFILE=$(find $(srcPack) -type f -name "*.zip" | head -n 1)
      if [ -n "$ZIPFILE" ]; then
        cp "$ZIPFILE" "$(analisysPack)"
        echo "Pacote $ZIPFILE copiado para $(analisysPack)"
      else
        echo "Nenhum arquivo ZIP encontrado. Falha no empacotamento!"
        exit 1
      fi
    fi
  displayName: 'Build & Empacotamento Multi-stack'

- task: CmdLine@2
  displayName: 'Veracode SCA'
  inputs:
    script: |
      export SRCCLR_API_TOKEN=$(SRCCLR_API_TOKEN)
      curl -sSL https://download.sourceclear.com/ci.sh | bash -s -- scan --update-advisor --allow-dirty
  continueOnError: true

- script: |
    curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
  displayName: 'Download Pipeline Scanner'

- task: ExtractFiles@1
  displayName: 'Extrair Pipeline Scanner'
  inputs:
    archiveFilePatterns: 'pipeline-scan-LATEST.zip'
    destinationFolder: '$(Build.ArtifactStagingDirectory)'
    cleanDestinationFolder: false

- script: |
    java -jar $(Build.ArtifactStagingDirectory)/pipeline-scan.jar -vid $(APIID) -vkey $(APIKEY) --file '$(analisysPack)' --issue_details true 
  displayName: 'Veracode PipelineScan'
  continueOnError: true

- task: Veracode@3
  displayName: 'Veracode SAST'
  inputs:
    ConnectionDetailsSelection: 'Credentials'
    apiId: '$(APIID)'
    apiKey: '$(APIKEY)'
    veracodeAppProfile: '$(veracodeAppProfile)'
    version: '$(build.buildNumber)'
    filepath: '$(analisysPack)'
    createSandBox: false
    createProfile: true
    importResults: false
    failBuildOnPolicyFail: false

# - task: Veracode Flaw Importer@3
#   displayName: 'Veracode importando falhas'
#   inputs:
#     ConnectionDetailsSelection: 'Credentials'
#     apiId: '$(APIID)'
#     apiKey: '$(APIKEY)'
#     veracodeAppProfile: '$(veracodeAppProfile)'
#     sandboxName: 
#     importType: 'All Flaws'
#     workItemType: 'Issue'
#     area: '$(system.teamProject)'
#     addCustomTag: '$(build.buildNumber)'
#     flawImportLimit: '1000'
