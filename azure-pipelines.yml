trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - group: 'Veracode Api Key'
  - name: veracodeAppProfile
    value: '$(Build.DefinitionName)'
  - name: srcPack
    value: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)'
  - name: analisysPack
    value: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)/analisysPack.zip'

steps:
  - bash: |
      if [ -f "pom.xml" ]; then
        echo "##vso[task.setvariable variable=JAVA_MAVEN]true"
      else
        echo "##vso[task.setvariable variable=JAVA_MAVEN]false"
      fi
    displayName: Detectar Projeto Java-Maven

  - bash: |
      JAVA_VERSION=$(grep -oPm1 "(?<=<maven.compiler.source>)[^<]+" pom.xml || echo "11")
      if [[ "$JAVA_VERSION" == "11" ]]; then
        JAVA_VERSION=$(grep -oPm1 "(?<=<java.version>)[^<]+" pom.xml || echo "11")
      fi
      echo "##vso[task.setvariable variable=JAVA_VERSION]$JAVA_VERSION"
    displayName: Detectar versão do Java
    condition: eq(variables['JAVA_MAVEN'], 'true')

  - bash: |
      wget https://github.com/adoptium/temurin23-binaries/releases/download/jdk-23.0.2%2B7/OpenJDK23U-debugimage_aarch64_alpine-linux_hotspot_23.0.2_7.tar.gz
      mkdir -p $(Agent.TempDirectory)/jdk23
      tar -xzf OpenJDK23U-jdk_x64_linux_hotspot_23_36.tar.gz -C $(Agent.TempDirectory)/jdk23 --strip-components=1
      echo "##vso[task.setvariable variable=JAVA_HOME]$(Agent.TempDirectory)/jdk23"
      echo "##vso[task.prependpath]$(Agent.TempDirectory)/jdk23/bin"
    displayName: "Baixar e instalar Java 23"

  - task: JavaToolInstaller@0
    displayName: Instalar Java Necessário
    inputs:
      versionSpec: '$(JAVA_VERSION)'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'
    condition: eq(variables['JAVA_MAVEN'], 'true')

  - bash: mvn clean package
    displayName: Compilar Projeto Maven
    condition: eq(variables['JAVA_MAVEN'], 'true')

  - bash: |
      mkdir -p $(srcPack)
      WAR_FILE=$(find target/ -maxdepth 1 -name "*.war" | head -n 1)
      JAR_FILE=$(find target/ -maxdepth 1 -name "*.jar" | head -n 1)

      if [ -f "$WAR_FILE" ]; then
        echo "WAR encontrado: $WAR_FILE"
        cp "$WAR_FILE" $(srcPack)/application.war
      elif [ -f "$JAR_FILE" ]; then
        echo "JAR encontrado: $JAR_FILE"
        cp "$JAR_FILE" $(srcPack)/application.jar
      else
        curl -fsS https://tools.veracode.com/veracode-cli/install | sh
        ./veracode package --source . --output $(srcPack) --trust
        find $(srcPack) -name "*.zip" | while read filename; do unzip -o -d "$(dirname "$filename")" "$filename"; done
        rm -rf $(srcPack)/*.zip
        cd $(srcPack)
        zip -r analysisPack.zip .
        mv analysisPack.zip $(analisysPack)
      fi
    displayName: Instalar CLI e Autopack Veracode

  - task: CmdLine@2
    displayName: 'Veracode Auto-Package'
    inputs:
      script: |
        curl -fsS https://tools.veracode.com/veracode-cli/install | sh
        export PATH="/home/vsts/work/1/s/:$PATH"
        ./veracode package --source . --output $(srcPack) --trust
        mv $(srcPack)/*.zip $(analisysPack)

  - task: CmdLine@2
    displayName: 'Veracode SCA'
    inputs:
      script: |
        export SRCCLR_API_TOKEN=$(SRCCLR_API_TOKEN)
        curl -sSL https://download.sourceclear.com/ci.sh | bash -s -- scan --update-advisor --allow-dirty
    continueOnError: true

  - script: |
      curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
    displayName: 'Download Pipeline Scanner'

  - task: ExtractFiles@1
    displayName: 'Extrair Pipeline Scanner'
    inputs:
      archiveFilePatterns: 'pipeline-scan-LATEST.zip'
      destinationFolder: '$(Build.ArtifactStagingDirectory)'
      cleanDestinationFolder: false

  - script: |
      java -jar $(Build.ArtifactStagingDirectory)/pipeline-scan.jar -vid $(APIID) -vkey $(APIKEY) --file '$(analisysPack)' --issue_details true 
    displayName: 'Veracode PipelineScan'
    continueOnError: true

  - task: Veracode@3
    displayName: 'Veracode SAST'
    inputs:
      ConnectionDetailsSelection: 'Credentials'
      apiId: '$(APIID)'
      apiKey: '$(APIKEY)'
      veracodeAppProfile: '$(veracodeAppProfile)'
      version: '$(build.buildNumber)'
      filepath: '$(analisysPack)'
      createSandBox: false
      createProfile: true
      importResults: false
      failBuildOnPolicyFail: false

  # - task: Veracode Flaw Importer@3
  #   displayName: 'Veracode importando falhas'
  #   inputs:
  #     ConnectionDetailsSelection: 'Credentials'
  #     apiId: '$(APIID)'
  #     apiKey: '$(APIKEY)'
  #     veracodeAppProfile: '$(veracodeAppProfile)'
  #     sandboxName: 
  #     importType: 'All Flaws'
  #     workItemType: 'Issue'
  #     area: '$(system.teamProject)'
  #     addCustomTag: '$(build.buildNumber)'
  #     flawImportLimit: '1000'
